---
- name: Install Arch Linux
  hosts: arch_iso

  vars_files:
    - vars/host_vars.yml
    - vars/encrypted_vars.yml

  tasks:

  # First tests and activities
  # --------------------------------------------------------------------

    - name: Abort if the host is not booted from the Arch install media
      fail:
        msg: "This host is not booted from the Arch install media!"
      when: ansible_nodename != 'archiso'

    - name: Set polish keyboard
      command: loadkeys pl

    - name: Ensure NTP is running
      service:
        name: systemd-timesyncd
        state: started
        enabled: true

  # Creating and encrypting partitons
  # --------------------------------------------------------------------

    - name: Wipe install drive and all its partitions
      command: find /dev -wholename "{{ install_drive }}*" -exec wipefs --force --all {} \;

    - name: Create boot partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 1
        part_end: 512MiB
        name: boot
        flags: [boot, esp]
        state: present

    - name: Create root partition
      parted:
        device: "{{ install_drive }}"
        label: gpt
        number: 2
        part_start: 512MiB
        name: root
        state: present

    - name: Create and open LUKS container with a passphrase
      luks_device:
        device: "{{ install_drive }}{{root_partition_suffix}}"
        passphrase: "{{ crypt_passphrase }}"
        name: cryptroot
        state: opened

    - name: Create FAT32 filesystem in boot partition
      filesystem:
        dev: "{{ install_drive }}{{ boot_partition_suffix }}"
        fstype: vfat
        opts: -F32
        force: yes

    - name: Create ext4 filesystem in root partion
      filesystem:
        dev: /dev/mapper/cryptroot
        fstype: ext4
        force: yes

    - name: Get UUID for boot filesystem
      command: blkid -s UUID -o value "{{ install_drive }}{{ boot_partition_suffix }}"
      register: boot_uuid
      changed_when: false

    - name: Get UUID for root filesystem
      command: blkid -s UUID -o value /dev/mapper/cryptroot
      register: root_uuid
      changed_when: false
