---

- name: Ensure kvm software is installed
  community.general.pacman:
    name:
      - libvirt
      - dmidecode
      - qemu
      - iptables-nft
      - edk2-ovmf
      - dnsmasq
      - bridge-utils
      - swtpm
      - libvirt-python
    state: present
    extra_args: --ask 4
  register: kvm_libvirt_installed

- name: Ensure gui kvm software is installed
  community.general.pacman:
    name:
      - virt-manager
      - virt-viewer
    state: present
  when: gui_enabled

- name: Reboot if libvirt installed # noqa no-handler
  ansible.builtin.reboot:
  when: kvm_libvirt_installed.changed

- name: Allow host resolution
  ansible.builtin.lineinfile:
    dest: /etc/nsswitch.conf
    regexp: "^hosts:"
    line: "hosts: mymachines resolve [!UNAVAIL=return] files libvirt libvirt_guest myhostname dns"

- name: Add main user to libvirt group
  ansible.builtin.user:
    name: "{{ user_name }}"
    groups: libvirt
    append: true

- name: Enable and start libvirt service
  ansible.builtin.systemd:
    name: libvirtd
    state: started
    enabled: true

- name: Kvm network
  tags: kvm_bridge
  block:
    - name: Remove default network
      community.libvirt.virt_net:
        state: absent
        name: default

    - name: Define bridge network
      community.libvirt.virt_net:
        command: define
        name: host-bridge
        xml: '{{ lookup("template", "host-bridge.xml.j2") }}'

    - name: Activate bridge network
      community.libvirt.virt_net:
        state: active
        name: host-bridge

    - name: Ensure that network autostarts
      community.libvirt.virt_net:
        autostart: true
        name: host-bridge

    - name: Create master bridge
      community.general.nmcli:
        type: bridge
        conn_name: "{{ kvm_bridge_interface }}"
        stp: false
        state: present

    - name: Set static IP for master bridge
      community.general.nmcli:
        type: bridge
        conn_name: "{{ kvm_bridge_interface }}"
        stp: false
        ip4: "{{ network_config.ipv4 }}"
        gw4: "{{ network_config.gw4 }}"
        dns4: "{{ network_config.dns4 | default(undef()) }}"
        dns4_search: "{{ network_config.dns4_search | default(undef()) }}"
        state: present
      when: network_config is defined
      register: kvm_master_bridge_result
      notify: Reboot after kvm network change

    - name: Configure network bond
      when: network_bond_enabled | bool
      block:
        - name: Create bond attached to bridge
          community.general.nmcli:
            type: bond
            conn_name: bond0
            slave_type: bridge
            master: "{{ kvm_bridge_interface }}"
            mode: balance-rr
            state: present

        - name: Add bond-slaves
          community.general.nmcli:
            type: bond-slave
            conn_name: "bond-slave-{{ item }}"
            ifname: "{{ item }}"
            master: bond0
            state: present
          loop: "{{ network_bond_slaves }}"

    - name: Create slave bridge
      community.general.nmcli:
        type: bridge-slave
        conn_name: bridge-slave-{{ network_interface }}
        ifname: "{{ network_interface }}"
        master: "{{ kvm_bridge_interface }}"
        state: present
      register: kvm_slave_bridge_result
      notify: Reboot after kvm network change
