---

- name: Check if zpool already exists
  ansible.builtin.shell: set -o pipefail && zpool list -H | grep ^{{ zpool.name }}
  changed_when: false
  failed_when: false
  register: zfs_zpool_list

- name: Create encrypted zpool
  ansible.builtin.expect:
    command: >
      zpool create -o ashift=12
      -O acltype=posixacl
      -O relatime=on
      -o autotrim=on
      -o autoexpand=on
      -O xattr=sa
      -O dnodesize=legacy
      -O normalization=formD
      -O mountpoint=none
      -O canmount=off
      -O compression={{ zpool.compression | default(zfs_default_zpool_compression) }}
      -O devices=off
      {{ '-O encryption=aes-256-gcm -O keyformat=passphrase -O keylocation=prompt' if zpool.encryption | default(true) else '' }}
      -O recordsize={{ zpool.recordsize | default(zfs_default_recordsize) }}
      {{ zpool.additional_properties | default('') | trim }}
      {{ zpool.name }} {{ zpool.raid | default('') }}
      {{ zpool.devices | join(' ') }}
    responses:
      (?i)passphrase: "{{ crypt_passphrase }}"
  no_log: true
  changed_when: true
  when: zpool.name not in zfs_zpool_list.stdout

- name: Enable weekly scrub timer
  ansible.builtin.systemd:
    name: zfs-scrub-weekly@{{ zpool.name }}.timer
    enabled: true
  when: zpool.raid is defined

- name: Enable monthly trimming
  ansible.builtin.systemd:
    name: zfs-trim@{{ zpool.name }}.timer
    enabled: true

- name: Create datasets
  ansible.builtin.command:
    cmd: >
      zfs create
      -o mountpoint={{ item.mount_point | default('/mnt/' + item.name) }}
      -o recordsize={{ item.recordsize | default(zfs_default_recordsize) }}
      {{ item.properties | default('') | trim }}
      {{ zpool.name }}/{{ item.name }}
      creates=/{{ item.mount_point | default('/mnt/' + item.name) }}
  loop: "{{ zpool.datasets }}"
  changed_when: true

- name: Mount datasets
  ansible.builtin.command: zfs mount -a
  changed_when: true
